IMPORT "PROCEDURE ProcedureDefine { name: \"copy_stack\", args: [\"stack_to_copy\"], instructions: [Instruction { Instruction: IDENTIFIER(\"stack_to_copy\"), line_num: 2, file_name: \"std.mars\" }, Instruction { Instruction: SWITCH, line_num: 2, file_name: \"std.mars\" }, Instruction { Instruction: SPAWN(\"replacement_stack\"), line_num: 3, file_name: \"std.mars\" }, Instruction { Instruction: VARDECLARE(VariableDefine { name: \"stack_copy\", instructions: [Some(Instruction { Instruction: DUP, line_num: 4, file_name: \"std.mars\" })] }), line_num: 4, file_name: \"std.mars\" }, Instruction { Instruction: VARDECLARE(VariableDefine { name: \"index\", instructions: [Some(Instruction { Instruction: PUSH(0), line_num: 6, file_name: \"std.mars\" })] }), line_num: 6, file_name: \"std.mars\" }, Instruction { Instruction: While(While { Cond: [Some(Instruction { Instruction: IDENTIFIER(\"index\"), line_num: 7, file_name: \"std.mars\" }), Some(Instruction { Instruction: IDENTIFIER(\"stack_to_copy\"), line_num: 7, file_name: \"std.mars\" }), Some(Instruction { Instruction: STACKSIZE, line_num: 7, file_name: \"std.mars\" }), Some(Instruction { Instruction: LT, line_num: 7, file_name: \"std.mars\" })], Contents: [Some(Instruction { Instruction: VARDECLARE(VariableDefine { name: \"current\", instructions: [Some(Instruction { Instruction: IDENTIFIER(\"[index\"), line_num: 8, file_name: \"std.mars\" }), Some(Instruction { Instruction: IDENTIFIER(\"]\"), line_num: 8, file_name: \"std.mars\" })] }), line_num: 8, file_name: \"std.mars\" }), Some(Instruction { Instruction: IDENTIFIER(\"stack_copy\"), line_num: 9, file_name: \"std.mars\" }), Some(Instruction { Instruction: SWITCH, line_num: 9, file_name: \"std.mars\" }), Some(Instruction { Instruction: IDENTIFIER(\"current\"), line_num: 9, file_name: \"std.mars\" }), Some(Instruction { Instruction: IDENTIFIER(\"stack_to_copy\"), line_num: 10, file_name: \"std.mars\" }), Some(Instruction { Instruction: SWITCH, line_num: 10, file_name: \"std.mars\" }), Some(Instruction { Instruction: VARDECLARE(VariableDefine { name: \"index\", instructions: [Some(Instruction { Instruction: IDENTIFIER(\"index\"), line_num: 12, file_name: \"std.mars\" }), Some(Instruction { Instruction: PUSH(1), line_num: 12, file_name: \"std.mars\" }), Some(Instruction { Instruction: ADD, line_num: 12, file_name: \"std.mars\" })] }), line_num: 12, file_name: \"std.mars\" })] }), line_num: 7, file_name: \"std.mars\" }, Instruction { Instruction: IDENTIFIER(\"this_stack\"), line_num: 14, file_name: \"std.mars\" }, Instruction { Instruction: SWITCH, line_num: 14, file_name: \"std.mars\" }, Instruction { Instruction: IDENTIFIER(\"stack_copy\"), line_num: 15, file_name: \"std.mars\" }] }\nPROCEDURE ProcedureDefine { name: \"puts\", args: [\"string\"], instructions: [Instruction { Instruction: VARDECLARE(VariableDefine { name: \"prev_stack\", instructions: [Some(Instruction { Instruction: THIS, line_num: 22, file_name: \"std.mars\" })] }), line_num: 22, file_name: \"std.mars\" }, Instruction { Instruction: IDENTIFIER(\"string\"), line_num: 23, file_name: \"std.mars\" }, Instruction { Instruction: DUP, line_num: 23, file_name: \"std.mars\" }, Instruction { Instruction: SWITCH, line_num: 24, file_name: \"std.mars\" }, Instruction { Instruction: STACKREV, line_num: 25, file_name: \"std.mars\" }, Instruction { Instruction: VARDECLARE(VariableDefine { name: \"counter\", instructions: [Some(Instruction { Instruction: PUSH(0), line_num: 26, file_name: \"std.mars\" })] }), line_num: 26, file_name: \"std.mars\" }, Instruction { Instruction: VARDECLARE(VariableDefine { name: \"size\", instructions: [Some(Instruction { Instruction: STACKSIZE, line_num: 27, file_name: \"std.mars\" })] }), line_num: 27, file_name: \"std.mars\" }, Instruction { Instruction: While(While { Cond: [Some(Instruction { Instruction: IDENTIFIER(\"counter\"), line_num: 28, file_name: \"std.mars\" }), Some(Instruction { Instruction: IDENTIFIER(\"size\"), line_num: 28, file_name: \"std.mars\" }), Some(Instruction { Instruction: LT, line_num: 28, file_name: \"std.mars\" })], Contents: [Some(Instruction { Instruction: PRINTASCII, line_num: 29, file_name: \"std.mars\" }), Some(Instruction { Instruction: VARDECLARE(VariableDefine { name: \"counter\", instructions: [Some(Instruction { Instruction: IDENTIFIER(\"counter\"), line_num: 30, file_name: \"std.mars\" }), Some(Instruction { Instruction: PUSH(1), line_num: 30, file_name: \"std.mars\" }), Some(Instruction { Instruction: ADD, line_num: 30, file_name: \"std.mars\" })] }), line_num: 30, file_name: \"std.mars\" })] }), line_num: 28, file_name: \"std.mars\" }, Instruction { Instruction: IDENTIFIER(\"prev_stack\"), line_num: 32, file_name: \"std.mars\" }, Instruction { Instruction: SWITCH, line_num: 33, file_name: \"std.mars\" }, Instruction { Instruction: CLOSE, line_num: 34, file_name: \"std.mars\" }] }\nPROCEDURE ProcedureDefine { name: \"eputs\", args: [\"string\"], instructions: [Instruction { Instruction: IDENTIFIER(\"string\"), line_num: 38, file_name: \"std.mars\" }, Instruction { Instruction: IDENTIFIER(\"puts\"), line_num: 38, file_name: \"std.mars\" }, Instruction { Instruction: PUSH(1), line_num: 39, file_name: \"std.mars\" }, Instruction { Instruction: EXIT, line_num: 39, file_name: \"std.mars\" }] }\n"
SPAWN "my_stack"
DUP
DUP
SWITCH
PUSH 1
PUSH 2
PUSH 3
PUSH 4
STACK "main"
SWITCH
CLOSE
SWITCH
